{
  "parser": "@typescript-eslint/parser",
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:import/typescript"
  ],
  "plugins": [
    "@typescript-eslint",
    "prettier",
    "unused-imports"
  ],
  "env": {
    "browser": true,
    "amd": true,
    "node": true,
    "es6": true
  },
  "parserOptions": {
    "ecmaVersion": 2018,
    "sourceType": "module",
    "parser": "babel-eslint"
  },
  "rules": {
    // Eslint built-in rules
    "no-undef": "error",
    "no-useless-escape": "off",
    "padding-line-between-statements": ["error",
      // Always require blank lines after directive (like "use-strict"), except between directives
      {"blankLine": "always", "prev": "directive", "next": "*"},
      {"blankLine": "any",    "prev": "directive", "next": "directive"},
      // Always require blank lines after import, except between imports
      {"blankLine": "always", "prev": "import", "next": "*"},
      {"blankLine": "never", "prev": "import", "next": "import"},
      // Always require blank lines before and after every sequence able declarations and export
      {"blankLine": "always", "prev": "*", "next": ["const", "let", "export"]},
      {"blankLine": "always", "prev": ["const", "let", "export"], "next": "*"},
      {"blankLine": "always",    "prev": ["const", "let", "export"], "next": ["const", "let", "export"]},
      // Always require blank lines before and after class declaration, if, do/while, switch, try
      {"blankLine": "always", "prev": "*", "next": ["if", "class", "for", "do", "while", "switch", "try"]},
      {"blankLine": "always", "prev": ["if", "class", "for", "do", "while", "switch", "try"], "next": "*"},
      // Always require blank lines before return statements
      {"blankLine": "always", "prev": "*", "next": "return"}
    ],
    "capitalized-comments": "off",
    "curly": "error",
    "default-case": "off",
    "dot-notation": "error",
    "eol-last": "off",
    "eqeqeq": ["error", "smart"],
    "guard-for-in": "error",
    "id-blacklist": [
      "error",
      "any",
      "Number",
      "number",
      "String",
      "string",
      "Boolean",
      "boolean",
      "Undefined"
    ],
    "id-match": "error",
    "no-control-regex": "off",
    "linebreak-style": "error",
    "max-len": "off",
    "new-parens": "error",
    "no-bitwise": "error",
    "no-caller": "error",
    "no-console": [
      "warn",
      {
        "allow": [
          "warn",
          "dir",
          "timeLog",
          "assert",
          "clear",
          "count",
          "countReset",
          "group",
          "groupEnd",
          "table",
          "dirxml",
          "groupCollapsed",
          "Console",
          "profile",
          "profileEnd",
          "timeStamp",
          "context"
        ]
      }
    ],
    "no-debugger": "error",
    "no-empty": "error",
    "no-eval": "error",
    "no-extra-semi": "error",
    "no-fallthrough": "error",
    "no-irregular-whitespace": "error",
    "no-multiple-empty-lines": "error",
    "no-new-wrappers": "error",
    "no-redeclare": "error",
    "no-shadow": [
      "error",
      {
        "hoist": "all"
      }
    ],
    "no-trailing-spaces": "error",
    "no-underscore-dangle": "off",
    "no-unused-expressions": "error",
    "no-unused-labels": "error",
    "quote-props": "off",
    "radix": "error",
    "space-before-function-paren": "off",
    "spaced-comment": "error",

    // Plugin - Import
    "import/first": "error",
    "import/no-unresolved": "error", 
    "import/order": ["error", { 
      "groups": [ "builtin", "external", "internal", "parent", "sibling", "index" ]
    }],

    // Plugin - Typescript
    "@typescript-eslint/no-unused-vars": "error",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/consistent-type-definitions": "error",
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/interface-name-prefix": "off",
    "@typescript-eslint/explicit-member-accessibility": "off",
    "@typescript-eslint/no-empty-interface": ["error", {
      "allowSingleExtends": true
    }],
    "@typescript-eslint/ban-types": ["error", {
      "types": {
        "{}": false,
        "object": false
      }
    }],


    // Plugin - Prettier
    "prettier/prettier": ["error", {
      "singleQuote": true,
      "printWidth": 100,
      "semi": true,
      "arrowParens" : "avoid",
      "trailingComma": "none"
    }],

     // Plugin - Unused imports
     "unused-imports/no-unused-imports": "warn"

  },
  "settings": {
  
    "import/parsers": {
      "@typescript-eslint/parser": [".ts"]
    },
    "import/resolver": {
      "typescript": {}
    },
    "import/ignore": ["node_modules"]
  },
  "globals": {
    "globalThis": true
  }
}
